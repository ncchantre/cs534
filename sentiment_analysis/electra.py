# -*- coding: utf-8 -*-
"""electra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NwmqnRBat2d_LxKOhkWFS320ugM1Z7m9
"""

from google.colab import drive
drive.mount('/content/drive')
path = 'drive/My Drive/CS534/Files/'

import pandas as pd
import torch
import numpy as np
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, matthews_corrcoef

model_name = "google/electra-base-discriminator"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)

#Opening csv with reddit data retrieved from API
#df = pd.read_csv(path + "RS_2022_random_sample_labels.csv")
#df = pd.read_csv(path + "amazonLabeledDataSets.csv")
df = load_dataset(path + "amazonLabeledDataSets.csv")

def electra_sentiment(text):
    max_length = 1200
    if len(text) > max_length:
      text = text[:max_length]

    encoded_text = tokenizer(text, return_tensors='pt', truncation=True, max_length=512)
    outputs = model(**encoded_text)
    predictions = outputs.logits
    probabilities = torch.softmax(predictions, dim=-1)
    return probabilities[:, 1].item()

def electra_sentiment2(text):
    # Tokenize the text
    encoded_text = tokenizer(text, return_tensors='pt', truncation=True, max_length=512)

    # Get predictions from the model
    outputs = model(**encoded_text)
    predictions = outputs.logits.argmax(dim=-1)

    # Return the predicted sentiment label
    return predictions.item()


def load_dataset(file_path):
  df = pd.read_csv(file_path)
  # remove rows withoiut score
  df = df[df['Misc'].astype(str).str.isdigit()]
  num_of_datapoints = df.shape[0]
  print("Number of Datapoints", num_of_datapoints)
  df.to_csv('debug_clean_input.csv', index=False)
  return df

test_text = "I love and enjoy dancing salsa"
sentiment = electra_sentiment2(test_text)
print(sentiment)

# evlauate model
actual_labels = []
predicted_labels = []

for index, row in df.iterrows():
  body = row['Body']
  actual_label = row['Misc']
  predicted_label = electra_sentiment2(body)

  actual_labels.append(actual_label)
  predicted_labels.append(predicted_label)

actual_labels = np.array(actual_labels).astype(int)

# obtain metrics
accuracy = accuracy_score(actual_labels, predicted_labels)
precision = precision_score(actual_labels, predicted_labels)
recall = recall_score(actual_labels, predicted_labels)
f1 = f1_score(actual_labels, predicted_labels)
mcc = matthews_corrcoef(actual_labels, predicted_labels)

print("Accuracy: ", accuracy)
print("F1: ", f1)
print("Recall", recall)
print("Precision: ", precision)
print("MCC: ", mcc)